/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package bean;

import RN.NoticiasRNLocal;
import entidad.Noticias;
import entidad.tipoUsuario;
import javax.ejb.EJB;
import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.ManagedProperty;
import javax.faces.bean.RequestScoped;
import javax.faces.bean.SessionScoped;
import javax.faces.context.FacesContext;
import javax.faces.event.ActionEvent;
import org.primefaces.component.commandbutton.CommandButton;
import org.primefaces.context.RequestContext;

/**
 *
 * @author RafaTrossero
 */
@ManagedBean
@RequestScoped
public class NoticiasBean {

    /**
     * Creates a new instance of NoticiasBean
     */
    @ManagedProperty("#{listaNoticiasBean}")
    private ListaNoticiasBean listaNoticiasBean;
    
    @EJB
    private NoticiasRNLocal noticiasRNlocal;
    
    private Noticias noticias;
    
    private CommandButton cbAction;
    
    public NoticiasBean() {
    
    this.noticias = new Noticias();
    }

    public ListaNoticiasBean getListaNoticiasBean() {
        return listaNoticiasBean;
    }

    public void setListaNoticiasBean(ListaNoticiasBean listaNoticiasBean) {
        this.listaNoticiasBean = listaNoticiasBean;
    }

    public Noticias getNoticias() {
        return noticias;
    }

    public void setNoticias(Noticias noticias) {
        this.noticias = noticias;
    }

    

    public NoticiasRNLocal getNoticiasRNlocal() {
        return noticiasRNlocal;
    }

    public void setNoticiasRNlocal(NoticiasRNLocal noticiasRNlocal) {
        this.noticiasRNlocal = noticiasRNlocal;
    }

    public CommandButton getCbAction() {
        return cbAction;
    }

    public void setCbAction(CommandButton cbAction) {
        this.cbAction = cbAction;
    }
    
    public void actionBtn() {

        switch (this.getListaNoticiasBean().getiActionBtnSelect()) {
            case 0:
                create();
                //limíar campos
                //this.limpiar();
                break;
            case 1:
                this.edit();
                break;
            case 2:
                //deshabilita el campo
               // this.activate(Boolean.FALSE);
                break;
            case 3:
                //habilita el campo
               // this.activate(Boolean.TRUE);
                break;

        }//fin switch
    }//fin actionBtn
    
     public void setBtnSelect(ActionEvent e) {
        CommandButton btnSelect = (CommandButton) e.getSource();
        System.out.println("boton select: " + btnSelect.getId());
    //0 crea
        //1: edit
        //2 delete

        //activo el boton
        this.getCbAction().setDisabled(false);

        if (btnSelect.getId().equals("cbCreate")) {
             this.getCbAction().setValue("Guardar");
            this.getListaNoticiasBean().setiActionBtnSelect(0);
           
            //campos requeridos
            //this.setbCamposRequeridos(true);

        } else if (btnSelect.getId().equals("cbEdit")) {
            this.getCbAction().setValue("Modificar");
            this.getListaNoticiasBean().setiActionBtnSelect(1);
            
            
            System.out.println("valor del boton: " + listaNoticiasBean.getiActionBtnSelect());

            //campos requeridos
            // this.setbCamposRequeridos(true);
        } else if (btnSelect.getId().equals("cbDeshabilitado")) {
            this.getListaNoticiasBean().setiActionBtnSelect(2);

           // this.setbCamposEditables(true);
            this.getCbAction().setValue("Desactivar");

        } else if (btnSelect.getId().equals("cbHabilitado")) {
            this.getListaNoticiasBean().setiActionBtnSelect(3);

          //  this.setbCamposEditables(true);
            this.getCbAction().setValue("Reactivar");

        }

        //fin else
    }//fin setBtnSelect
     
     public void create() {
        String sMensaje = "";
        FacesMessage fm;
        FacesMessage.Severity severity = null;
        try {
            //noticias.setActive(Boolean.TRUE);
            noticiasRNlocal.create(noticias);
            sMensaje = "El dato fue guardado";
            severity = FacesMessage.SEVERITY_INFO;
            this.getCbAction().setDisabled(true);

            //agregar a la lista
           this.getListaNoticiasBean().getLstNoticias().add(noticias);

            //limpiar campos
            this.limpiar();
            
            RequestContext context = RequestContext.getCurrentInstance();
            context.execute("dlgNoticias.hide()");

        } catch (Exception ex) {
            severity = FacesMessage.SEVERITY_ERROR;
            sMensaje = "Error al crear: " + ex.getMessage();

        } finally {
            fm = new FacesMessage(severity, sMensaje, null);
            FacesContext fc = FacesContext.getCurrentInstance();
            fc.addMessage(null, fm);
        }
    }// fin crear
    
      private void limpiar() {
        this.noticias = new Noticias();
    }

    public void edit() {
        System.out.println("Entro al edit");
        String sMensaje = "";
        FacesMessage fm;
        FacesMessage.Severity severity = null;
        try {
            //get la fila seleccionada 
            System.out.println("El contenido esssssssssssssssssssssssssssssssssssss" +noticias.getContenido());
           System.out.println("El contenido esssssssssssssssssssssssssssssssssssss" +noticias.getTitulo());
            System.out.println("El contenido esssssssssssssssssssssssssssssssssssss" +noticias.getFecha_agregado());
            noticiasRNlocal.edit(this.getNoticias());
            
            sMensaje = "Información actualizada con éxito";
            severity = FacesMessage.SEVERITY_INFO;

            //elimino y agrego el organismo modificado a la lista
            int iPos = this.getListaNoticiasBean().getLstNoticias().indexOf(this.getNoticias());
            this.getListaNoticiasBean().getLstNoticias().remove(iPos);
            this.getListaNoticiasBean().getLstNoticias().add(iPos, this.getNoticias());
            

            this.getCbAction().setValue("Modificar");
            this.getCbAction().setDisabled(true);

            //this.setbCamposRequeridos(false);
            RequestContext context = RequestContext.getCurrentInstance();
            context.execute("dlgNoticias.hide()");

        } catch (Exception ex) {
            severity = FacesMessage.SEVERITY_ERROR;
            sMensaje = "Error al actualizar:" + ex.getMessage();

        } finally {
            fm = new FacesMessage(severity, sMensaje, "");
            FacesContext fc = FacesContext.getCurrentInstance();
            fc.addMessage(null, fm);
        }
    }
    
}
