/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package bean;

import RN.DocenteComisionRNLocal;
import RN.ProyectoAlumnoRNLocal;
import RN.ProyectoAsesorRNLocal;
import RN.ProyectoCodirectorRNLocal;
import RN.ProyectoDirectorRNLocal;
import RN.ProyectoRNbeanLocal;
import RN.ProyectoTribunalRNLocal;
import RN.TribunalRNLocal;
import entidad.Comision;
import entidad.Profesional;
import entidad.Proyecto;
import entidad.ProyectoAlumno;
import entidad.ProyectoAsesor;
import entidad.ProyectoCodirector;
import entidad.ProyectoDirector;
import entidad.Tribunal;
import entidad.Usuario;
import entidad.tipoUsuario;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.annotation.PostConstruct;
import javax.ejb.EJB;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.ManagedProperty;
import javax.faces.bean.SessionScoped;
import javax.faces.model.SelectItem;
import javax.inject.Named;

/**
 *
 * @author WalterVergara
 */
@ManagedBean
@SessionScoped
public class ListaProyectoBean implements Serializable {

    @EJB
    private ProyectoRNbeanLocal proyectoRNbeanLocal;
    private List<Proyecto> lstProyecto;
    private List<Proyecto> lstProyectoByEstado;
    private List<SelectItem> lstSIProyecto;
    private List<SelectItem> lstSIProyectoByEstado;
    private List<Proyecto> lstProyectoAll;
    private List<Proyecto> lstproyAses;
    private ProyectoAsesor proyAses;
    private List<SelectItem> lstSIProyectoAll;
    private int iActionBtnSelect;
    private List<ProyectoCodirector> lstProyectoCodirector;
    private ProyectoCodirector proyCodir;
    private List<ProyectoDirector> lstProyectoDirector;
    private ProyectoDirector proyDir;
    private List<Proyecto> lstProyectoByTribunal;
    private List<ProyectoAsesor> lstProyectoAsesor;
    private List<SelectItem> lstSIProyectoByTribunal;
    private List<SelectItem> lstSIProyectoAsesor;
    private List<Tribunal> lstTribunal;
    private Tribunal tribunalDoc;
    private ProyectoAlumno proyAlu;
    private Proyecto proyectoResult;

    private Proyecto proyecto;

    private Comision comision;

    @EJB
    private TribunalRNLocal tribunalRNlocal;
    @EJB
    private ProyectoTribunalRNLocal proyectoTribunalRNlocal;
    @EJB
    private DocenteComisionRNLocal docenteComisionRNlocal;
    @EJB
    private ProyectoAsesorRNLocal proyectoAsesorRNlocal;
    @EJB
    private ProyectoCodirectorRNLocal proyectoCodirectorRNlocal;
    @EJB
    private ProyectoDirectorRNLocal proyectoDirectorRNlocal;
    @EJB
    private ProyectoAlumnoRNLocal proyectoAlumnoRNLocal;

    public ListaProyectoBean() {
        System.out.println("Constructor ListaProyectoBean");
        lstProyecto = new ArrayList<Proyecto>();
        lstProyectoByEstado = new ArrayList<Proyecto>();
        lstProyectoAsesor = new ArrayList<ProyectoAsesor>();
        lstProyectoAll = new ArrayList<Proyecto>();
        lstProyectoByTribunal = new ArrayList<Proyecto>();
        tribunalDoc = new Tribunal();
        proyecto = new Proyecto();
        comision = new Comision();
        lstproyAses = new ArrayList<Proyecto>();
        proyAses = new ProyectoAsesor();
        lstProyectoCodirector = new ArrayList<ProyectoCodirector>();
        proyCodir = new ProyectoCodirector();
        lstProyectoDirector = new ArrayList<ProyectoDirector>();
        proyDir = new ProyectoDirector();
        proyAlu = new ProyectoAlumno();
        proyectoResult= new Proyecto();
        //lstProyectoByEstado= new ArrayList<Proyecto>();
    }

    @PostConstruct
    void init() {
        System.out.println("PostConstructor ListaProyectoBean");
        this.cargar_proyectos();
        this.cargar_SI_proyectos();
       //this.cargar_proyectosByEstado(1);

        //System.out.println("Departamentos: " + this.getLstDepartamento());
    }

    public List<Proyecto> getLstProyecto() {
        return lstProyecto;
    }

    public void setLstProyecto(List<Proyecto> lstProyecto) {
        this.lstProyecto = lstProyecto;
    }

    public List<ProyectoCodirector> getLstProyectoCodirector() {
        return lstProyectoCodirector;
    }

    public ProyectoAlumno getProyAlu() {
        return proyAlu;
    }

    public void setProyAlu(ProyectoAlumno proyAlu) {
        this.proyAlu = proyAlu;
    }

    public Proyecto getProyectoResult() {
        return proyectoResult;
    }

    public void setProyectoResult(Proyecto proyectoResult) {
        this.proyectoResult = proyectoResult;
    }

    public List<ProyectoDirector> getLstProyectoDirector() {
        return lstProyectoDirector;
    }

    public void setLstProyectoDirector(List<ProyectoDirector> lstProyectoDirector) {
        this.lstProyectoDirector = lstProyectoDirector;
    }

    public ProyectoDirector getProyDir() {
        return proyDir;
    }

    public void setProyDir(ProyectoDirector proyDir) {
        this.proyDir = proyDir;
    }

    public void setLstProyectoCodirector(List<ProyectoCodirector> lstProyectoCodirector) {
        this.lstProyectoCodirector = lstProyectoCodirector;
    }

    public ProyectoCodirector getProyCodir() {
        return proyCodir;
    }

    public void setProyCodir(ProyectoCodirector proyCodir) {
        this.proyCodir = proyCodir;
    }

    public List<SelectItem> getLstSIProyectoAsesor() {
        return lstSIProyectoAsesor;
    }

    public List<Proyecto> getLstproyAses() {
        return lstproyAses;
    }

    public void setLstproyAses(List<Proyecto> lstproyAses) {
        this.lstproyAses = lstproyAses;
    }

    public ProyectoAsesor getProyAses() {
        return proyAses;
    }

    public void setProyAses(ProyectoAsesor proyAses) {
        this.proyAses = proyAses;
    }

    public void setLstSIProyectoAsesor(List<SelectItem> lstSIProyectoAsesor) {
        this.lstSIProyectoAsesor = lstSIProyectoAsesor;
    }

    public List<Proyecto> getLstProyectoAll() {
        return lstProyectoAll;
    }

    public List<ProyectoAsesor> getLstProyectoAsesor() {
        return lstProyectoAsesor;
    }

    public void setLstProyectoAsesor(List<ProyectoAsesor> lstProyectoAsesor) {
        this.lstProyectoAsesor = lstProyectoAsesor;
    }

    public void setLstProyectoAll(List<Proyecto> lstProyectoAll) {
        this.lstProyectoAll = lstProyectoAll;
    }

    public List<SelectItem> getLstSIProyectoAll() {
        return lstSIProyectoAll;
    }

    public void setLstSIProyectoAll(List<SelectItem> lstSIProyectoAll) {
        this.lstSIProyectoAll = lstSIProyectoAll;
    }

    public List<SelectItem> getLstSIProyecto() {
        return lstSIProyecto;
    }

    public void setLstSIProyecto(List<SelectItem> lstSIProyecto) {
        this.lstSIProyecto = lstSIProyecto;
    }

    public List<Proyecto> getLstProyectoByEstado() {
        return lstProyectoByEstado;
    }

    public void setLstProyectoByEstado(List<Proyecto> lstProyectoByEstado) {
        this.lstProyectoByEstado = lstProyectoByEstado;
    }

    public List<SelectItem> getLstSIProyectoByEstado() {
        return lstSIProyectoByEstado;
    }

    public void setLstSIProyectoByEstado(List<SelectItem> lstSIProyectoByEstado) {
        this.lstSIProyectoByEstado = lstSIProyectoByEstado;
    }

    public int getiActionBtnSelect() {
        return iActionBtnSelect;
    }

    public void setiActionBtnSelect(int iActionBtnSelect) {
        this.iActionBtnSelect = iActionBtnSelect;
    }

    public List<Tribunal> getLstTribunal() {
        return lstTribunal;
    }

    public void setLstTribunal(List<Tribunal> lstTribunal) {
        this.lstTribunal = lstTribunal;
    }

    public List<Proyecto> getLstProyectoByTribunal() {
        return lstProyectoByTribunal;
    }

    public void setLstProyectoByTribunal(List<Proyecto> lstProyectoByTribunal) {
        this.lstProyectoByTribunal = lstProyectoByTribunal;
    }

    public List<SelectItem> getLstSIProyectoByTribunal() {
        return lstSIProyectoByTribunal;
    }

    public void setLstSIProyectoByTribunal(List<SelectItem> lstSIProyectoByTribunal) {
        this.lstSIProyectoByTribunal = lstSIProyectoByTribunal;
    }

    public Proyecto getProyecto() {
        return proyecto;
    }

    public void setProyecto(Proyecto proyecto) {
        this.proyecto = proyecto;
    }

    public DocenteComisionRNLocal getDocenteComisionRNlocal() {
        return docenteComisionRNlocal;
    }

    public void setDocenteComisionRNlocal(DocenteComisionRNLocal docenteComisionRNlocal) {
        this.docenteComisionRNlocal = docenteComisionRNlocal;
    }

    public Comision getComision() {
        return comision;
    }

    public void setComision(Comision comision) {
        this.comision = comision;
    }

    public void cargar_proyectos() {
        try {
            this.setLstProyecto(this.proyectoRNbeanLocal.findAll());

        } catch (Exception ex) {
            System.out.println("Error al cargar Proyectos " + ex.toString());
        }
        System.out.println("LOS PROYECTOS SOONNNN;;;;;" + lstProyecto);
    }

    public Proyecto cargar_proyectos_alumnos(long idAlu, Usuario a) throws Exception{
       try { 
        if(a.getTipousuario().equals(tipoUsuario.ALUMNO)){
             this.setProyAlu(proyectoAlumnoRNLocal.findByProyectoAlumno(idAlu));
             System.out.println("incha de atletico" + proyAlu);
         }
    
       
        } catch (Exception ex) {
            System.out.println("Error al buscar alumnos en proyectoAlumno" + ex.toString());
        }
        return proyAlu.getProyecto();
    }
    public void cargar_proyectos_profesionales(long idDocent, Usuario a) {
        try {
            if (a.getTipousuario().equals(tipoUsuario.DOCENTE) || a.getTipousuario().equals(tipoUsuario.PROFESIONAL)) {
                this.setLstProyectoAsesor(proyectoAsesorRNlocal.findByProyectoAsesor(idDocent));
               
                if (lstProyectoAsesor != null) {
                    Iterator<ProyectoAsesor> it = lstProyectoAsesor.iterator();

                    while (it.hasNext()) {
                        proyAses = it.next();
                        System.out.println("hola" + proyAses.getProyecto().getTitulo());

                        //realiza el alta en la tabla relacional proy_alumno dependiendo de cuantos alumnos se han seleccionado
                        lstproyAses.add(proyAses.getProyecto());
                    }

                }

                this.setLstProyectoCodirector(proyectoCodirectorRNlocal.findByProyectoCodirector(idDocent));
               
                if (lstProyectoCodirector != null) {
                    Iterator<ProyectoCodirector> ik = lstProyectoCodirector.iterator();

                    while (ik.hasNext()) {
                        proyCodir = ik.next();
                       

                        //realiza el alta en la tabla relacional proy_alumno dependiendo de cuantos alumnos se han seleccionado
                        lstproyAses.add(proyCodir.getProyecto());
                    }

                }
                this.setLstProyectoDirector(proyectoDirectorRNlocal.findByProyectoDirector(idDocent));
             
                if (lstProyectoDirector != null) {
                    Iterator<ProyectoDirector> ip = lstProyectoDirector.iterator();

                    while (ip.hasNext()) {
                        proyDir = ip.next();
                        System.out.println("hola" + proyDir.getProyecto().getTitulo());

                        //realiza el alta en la tabla relacional proy_alumno dependiendo de cuantos alumnos se han seleccionado
                        lstproyAses.add(proyDir.getProyecto());
                    }

                }
            }
            
            

        } catch (Exception ex) {
            System.out.println("Error al buscar profesionales en proyectoAsesor" + ex.toString());
        }

    }

    public void cargar_SI_proyectos_profesionales() {
        this.setLstSIProyectoAsesor(new ArrayList<SelectItem>());
     
        for (Proyecto t : this.getLstproyAses()) {
            SelectItem si = new SelectItem(t, t.getTitulo());
            this.getLstSIProyectoAsesor().add(si);
        }

    }

    public void cargar_proyectosByEstado(Integer estado, long idDoc) {
        try {
            System.out.println("]]]]]]]]]]]]]]]]]]]]]************]]]]]]]]]]]]]]]]]]]]]]]" + idDoc);
            if (idDoc != 9999L) {
                this.setComision(this.docenteComisionRNlocal.findByIdDocente(idDoc));
                if (comision.getId().equals(1L)) {
                    this.setLstProyectoByEstado(this.proyectoRNbeanLocal.findProyByEstado(estado));
                    System.out.println("los proyectos con estado " + estado + "son : " + lstProyectoByEstado);
                }
            } else {
                this.setLstProyectoByEstado(this.proyectoRNbeanLocal.findProyByEstado(estado));
                System.out.println("los proyectos con estado " + estado + "son : " + lstProyectoByEstado);
            }

        } catch (Exception ex) {
            System.out.println("Error al cargar Proyectos por estado" + ex.toString());
        }
    }

    public void cargar_proyectosAll(long idDocente) {
        try {
          
            if (idDocente != 9999L) {
                this.setComision(this.docenteComisionRNlocal.findByIdDocente(idDocente));
                System.out.println("pertenece a alguna comision" + comision.getComision());
                if (comision.getId().equals(1L)) {
                    this.setLstProyectoAll(this.proyectoRNbeanLocal.findAll());

                }
            } else {
                this.setLstProyectoAll(this.proyectoRNbeanLocal.findAll());

            }

        } catch (Exception ex) {
            System.out.println("Error al cargar Proyectos por estado" + ex.toString());
        }
    }

    public void cargar_SI_proyectos() {
        this.setLstSIProyecto(new ArrayList<SelectItem>());
        System.out.println("LOS PROYECTOS QUE LLEGAN AL SI  SOONNNN;;;;;" + lstProyecto);
        for (Proyecto p : this.getLstProyecto()) {
            SelectItem si = new SelectItem(p, p.getTitulo());
            this.getLstSIProyecto().add(si);
        }

    }//fin for

    public void cargar_SI_proyectosAll() {
        this.setLstSIProyectoAll(new ArrayList<SelectItem>());
        System.out.println("LOS PROYECTOS QUE LLEGAN AL SI  SOONNNN;;;;;" + lstProyectoAll);
        for (Proyecto t : this.getLstProyectoAll()) {
            SelectItem ki = new SelectItem(t, t.getTitulo());
            this.getLstSIProyectoAll().add(ki);
        }

    }//fin for

 public void cargar_SI_proyectosbyEstado() {

        this.setLstSIProyectoByEstado(new ArrayList<SelectItem>());

        for (Proyecto a : this.getLstProyectoByEstado()) {
            SelectItem di = new SelectItem(a, a.getTitulo());
            this.getLstSIProyectoByEstado().add(di);
        }
        System.out.println("los proyectos en el selecitem son" + lstSIProyectoByEstado);
    }//fin for

    public void cargarProyectosByDocenteTribunal(long idDoc, long estado) {

         if (idDoc != 9999L) {
        try {
           
            this.setLstTribunal(tribunalRNlocal.findTribunalByDocente(idDoc));
            System.out.println(":::::::::::::: TRIBUNAL DONDE ESTA EL DOCENTE ES:::::::::::::::::" + lstTribunal);
            
        } catch (Exception ex) {
            Logger.getLogger(ListaProyectoBean.class.getName()).log(Level.SEVERE, null, ex);
        }

        Iterator<Tribunal> tribunal = lstTribunal.iterator();

        try {
            //System.out.println("el codigo del proyecto es " + proy_ases.getProyecto().getTitulo());
        } catch (Exception ex) {
            Logger.getLogger(ListaProyectoBean.class.getName()).log(Level.SEVERE, null, ex);
        }
        while (tribunal.hasNext()) {
            try {
                tribunalDoc = tribunal.next();

                this.setProyecto(proyectoTribunalRNlocal.findProyectoByTribunal(tribunalDoc.getId()));
                System.out.println("[]]]]]]][][][][][][][][][][][]***" + proyecto.getEstado().getId());
                if (proyecto.getEstado().getId().equals(estado)) {
                    lstProyectoByTribunal.add(proyecto);

                }

            } catch (Exception ex) {
                Logger.getLogger(ListaProyectoBean.class.getName()).log(Level.SEVERE, null, ex);
            }

        }
         }else{
             try {
                 System.out.println("[]]]]]]][][][]ENTRO POR EL ELSE [][][][][][][]***"  );
                 this.setLstProyectoByTribunal(this.proyectoRNbeanLocal.findProyByEstado(4));
             } catch (Exception ex) {
                 Logger.getLogger(ListaProyectoBean.class.getName()).log(Level.SEVERE, null, ex);
             }
         }
        System.out.println(":::::::::::::: LOS PROYECTOS SON!!!!!!!!:::::::::::::::::" + lstProyectoByTribunal);
    }

    public void cargar_SI_proyectosbyDocenteTribunal() {

        this.setLstSIProyectoByTribunal(new ArrayList<SelectItem>());

        for (Proyecto a : this.getLstProyectoByTribunal()) {
            SelectItem di = new SelectItem(a, a.getTitulo());
            this.getLstSIProyectoByTribunal().add(di);
}
        System.out.println("los proyectos en el selecitem son" + lstSIProyectoByEstado);
    }//fin for

}
