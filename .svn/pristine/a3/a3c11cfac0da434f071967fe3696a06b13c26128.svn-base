/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package bean;

import RN.ProyectoRNbeanLocal;
import RN.ProyectoTribunalRNLocal;
import RN.TribunalRNLocal;
import entidad.Profesional;
import entidad.Proyecto;
import entidad.Tribunal;
import javax.inject.Named;
import javax.faces.bean.SessionScoped;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.annotation.PostConstruct;
import javax.ejb.EJB;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.ManagedProperty;
import javax.faces.model.SelectItem;

/**
 *
 * @author WalterVergara
 */
@ManagedBean
@SessionScoped
public class ListaProyectoBean implements Serializable {

    @EJB
    private ProyectoRNbeanLocal proyectoRNbeanLocal;
    private List<Proyecto> lstProyecto;
    private List<Proyecto> lstProyectoByEstado;
    private List<SelectItem> lstSIProyecto;
    private List<SelectItem> lstSIProyectoByEstado;
    private int iActionBtnSelect;

    private List<Proyecto> lstProyectoByTribunal;
    private List<SelectItem> lstSIProyectoByTribunal;

    private List<Tribunal> lstTribunal;
    private Tribunal tribunalDoc;

    private Proyecto proyecto;

    @EJB
    private TribunalRNLocal tribunalRNlocal;
    @EJB
    private ProyectoTribunalRNLocal proyectoTribunalRNlocal;

    public ListaProyectoBean() {
        System.out.println("Constructor ListaProyectoBean");
        lstProyecto = new ArrayList<Proyecto>();
        lstProyectoByEstado = new ArrayList<Proyecto>();
        lstProyectoByTribunal = new ArrayList<Proyecto>();
        tribunalDoc = new Tribunal();
        proyecto = new Proyecto();
        //lstProyectoByEstado= new ArrayList<Proyecto>();
    }

    @PostConstruct
    void init() {
        System.out.println("PostConstructor ListaProyectoBean");
        this.cargar_proyectos();
        this.cargar_SI_proyectos();
       //this.cargar_proyectosByEstado(1);

        //System.out.println("Departamentos: " + this.getLstDepartamento());
    }

    public List<Proyecto> getLstProyecto() {
        return lstProyecto;
    }

    public void setLstProyecto(List<Proyecto> lstProyecto) {
        this.lstProyecto = lstProyecto;
    }

    public List<SelectItem> getLstSIProyecto() {
        return lstSIProyecto;
    }

    public void setLstSIProyecto(List<SelectItem> lstSIProyecto) {
        this.lstSIProyecto = lstSIProyecto;
    }

    public List<Proyecto> getLstProyectoByEstado() {
        return lstProyectoByEstado;
    }

    public void setLstProyectoByEstado(List<Proyecto> lstProyectoByEstado) {
        this.lstProyectoByEstado = lstProyectoByEstado;
    }

    public List<SelectItem> getLstSIProyectoByEstado() {
        return lstSIProyectoByEstado;
    }

    public void setLstSIProyectoByEstado(List<SelectItem> lstSIProyectoByEstado) {
        this.lstSIProyectoByEstado = lstSIProyectoByEstado;
    }

    public int getiActionBtnSelect() {
        return iActionBtnSelect;
    }

    public void setiActionBtnSelect(int iActionBtnSelect) {
        this.iActionBtnSelect = iActionBtnSelect;
    }

    public List<Tribunal> getLstTribunal() {
        return lstTribunal;
    }

    public void setLstTribunal(List<Tribunal> lstTribunal) {
        this.lstTribunal = lstTribunal;
    }

    public List<Proyecto> getLstProyectoByTribunal() {
        return lstProyectoByTribunal;
    }

    public void setLstProyectoByTribunal(List<Proyecto> lstProyectoByTribunal) {
        this.lstProyectoByTribunal = lstProyectoByTribunal;
    }

    public List<SelectItem> getLstSIProyectoByTribunal() {
        return lstSIProyectoByTribunal;
    }

    public void setLstSIProyectoByTribunal(List<SelectItem> lstSIProyectoByTribunal) {
        this.lstSIProyectoByTribunal = lstSIProyectoByTribunal;
    }

    public Proyecto getProyecto() {
        return proyecto;
    }

    public void setProyecto(Proyecto proyecto) {
        this.proyecto = proyecto;
    }

    public void cargar_proyectos() {
        try {
            this.setLstProyecto(this.proyectoRNbeanLocal.findAll());

        } catch (Exception ex) {
            System.out.println("Error al cargar Proyectos " + ex.toString());
        }
        System.out.println("LOS PROYECTOS SOONNNN;;;;;" + lstProyecto);
    }

    public void cargar_proyectosByEstado(Integer estado) {
        try {

            this.setLstProyectoByEstado(this.proyectoRNbeanLocal.findProyByEstado(estado));
            System.out.println("los proyectos con estado " + estado + "son : " + lstProyectoByEstado);

        } catch (Exception ex) {
            System.out.println("Error al cargar Proyectos por estado" + ex.toString());
        }
    }

    public void cargar_SI_proyectos() {
        this.setLstSIProyecto(new ArrayList<SelectItem>());
        System.out.println("LOS PROYECTOS QUE LLEGAN AL SI  SOONNNN;;;;;" + lstProyecto);
        for (Proyecto p : this.getLstProyecto()) {
            SelectItem si = new SelectItem(p, p.getTitulo());
            this.getLstSIProyecto().add(si);
        }

    }//fin for

    public void cargar_SI_proyectosbyEstado() {

        this.setLstSIProyectoByEstado(new ArrayList<SelectItem>());

        for (Proyecto a : this.getLstProyectoByEstado()) {
            SelectItem di = new SelectItem(a, a.getTitulo());
            this.getLstSIProyectoByEstado().add(di);
        }
        System.out.println("los proyectos en el selecitem son" + lstSIProyectoByEstado);
    }//fin for

    public void cargarProyectosByDocenteTribunal(long idDoc, long estado) {

        try {
            this.setLstTribunal(tribunalRNlocal.findTribunalByDocente(idDoc));
            System.out.println(":::::::::::::: TRIBUNAL DONDE ESTA EL DOCENTE ES:::::::::::::::::" + lstTribunal);
        } catch (Exception ex) {
            Logger.getLogger(ListaProyectoBean.class.getName()).log(Level.SEVERE, null, ex);
        }

        Iterator<Tribunal> tribunal = lstTribunal.iterator();

        try {
            //System.out.println("el codigo del proyecto es " + proy_ases.getProyecto().getTitulo());
        } catch (Exception ex) {
            Logger.getLogger(ListaProyectoBean.class.getName()).log(Level.SEVERE, null, ex);
        }
        while (tribunal.hasNext()) {
            try {
                tribunalDoc = tribunal.next();

                this.setProyecto(proyectoTribunalRNlocal.findProyectoByTribunal(tribunalDoc.getId()));
                System.out.println("[]]]]]]][][][][][][][][][][][]***" + proyecto.getEstado().getId());
                if (proyecto.getEstado().getId().equals(estado)) {
                    lstProyectoByTribunal.add(proyecto);

                }

            } catch (Exception ex) {
                Logger.getLogger(ListaProyectoBean.class.getName()).log(Level.SEVERE, null, ex);
            }

        }

        System.out.println(":::::::::::::: LOS PROYECTOS SON!!!!!!!!:::::::::::::::::" + lstProyectoByTribunal);
    }

 public void cargar_SI_proyectosbyDocenteTribunal() {

        this.setLstSIProyectoByTribunal(new ArrayList<SelectItem>());

        for (Proyecto a : this.getLstProyectoByTribunal()) {
            SelectItem di = new SelectItem(a, a.getTitulo());
            this.getLstSIProyectoByTribunal().add(di);
        }
        System.out.println("los proyectos en el selecitem son" + lstSIProyectoByEstado);
    }//fin for

}
