/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package bean;

import RN.FechasExamenRNLocal;
import entidad.FechasExamen;
import javax.ejb.EJB;
import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.ManagedProperty;
import javax.faces.bean.RequestScoped;
import javax.faces.context.FacesContext;
import javax.faces.event.ActionEvent;
import org.primefaces.component.commandbutton.CommandButton;
import org.primefaces.context.RequestContext;

/**
 *
 * @author RafaTrossero
 */
@ManagedBean
@RequestScoped
public class FechasExamenBean {

    /**
     * Creates a new instance of FechasExamenBean
     */
    @ManagedProperty("#{listaFechasExamenBean}")
    private ListaFechasExamenBean listaFechasExamenBean;
    private FechasExamen fechasExamen;
    private CommandButton cbAction;
    
    @EJB
    private FechasExamenRNLocal fechasExamenRNLocal;
    
    
    
    public FechasExamenBean() {
        this.fechasExamen = new FechasExamen();
    }

    public ListaFechasExamenBean getListaFechasExamenBean() {
        return listaFechasExamenBean;
    }

    public void setListaFechasExamenBean(ListaFechasExamenBean listaFechasExamenBean) {
        this.listaFechasExamenBean = listaFechasExamenBean;
    }

    public FechasExamen getFechasExamen() {
        return fechasExamen;
    }

    public void setFechasExamen(FechasExamen fechasExamen) {
        this.fechasExamen = fechasExamen;
    }

    public CommandButton getCbAction() {
        return cbAction;
    }

    public void setCbAction(CommandButton cbAction) {
        this.cbAction = cbAction;
    }

    public FechasExamenRNLocal getFechasExamenRNLocal() {
        return fechasExamenRNLocal;
    }

    public void setFechasExamenRNLocal(FechasExamenRNLocal fechasExamenRNLocal) {
        this.fechasExamenRNLocal = fechasExamenRNLocal;
    }
    
    public void actionBtn() {

        switch (this.getListaFechasExamenBean().getiActionBtnSelect()) {
            case 0:
                create();
                //limíar campos
                //this.limpiar();
                break;
            case 1:
              this.edit();
                break;
            case 2:
                //deshabilita el campo
              //  this.activate(Boolean.FALSE);
                break;
            case 3:
                //habilita el campo
               // this.activate(Boolean.TRUE);
                break;

        }//fin switch
    }//fin actionBtn
    
      public void setBtnSelect(ActionEvent e) {
        CommandButton btnSelect = (CommandButton) e.getSource();
        System.out.println("boton select: " + btnSelect.getId());
    //0 crea
        //1: edit
        //2 delete

        //activo el boton
        this.getCbAction().setDisabled(false);

        if (btnSelect.getId().equals("cbCreate")) {
             this.getCbAction().setValue("Guardar");
            this.getListaFechasExamenBean().setiActionBtnSelect(0);
           
            //campos requeridos
            //this.setbCamposRequeridos(true);

        } else if (btnSelect.getId().equals("cbEdit")) {
            this.getCbAction().setValue("Modificar");
            this.getListaFechasExamenBean().setiActionBtnSelect(1);
            
            
           
            //campos requeridos
            // this.setbCamposRequeridos(true);
        } else if (btnSelect.getId().equals("cbDeshabilitado")) {
            this.getListaFechasExamenBean().setiActionBtnSelect(2);

           // this.setbCamposEditables(true);
            this.getCbAction().setValue("Desactivar");

        } else if (btnSelect.getId().equals("cbHabilitado")) {
          this.getListaFechasExamenBean().setiActionBtnSelect(3);

          // this.setbCamposEditables(true);
            this.getCbAction().setValue("Reactivar");

        }

        //fin else
    }//fin setBtnSelect
      
             public void create() {
        String sMensaje = "";
        FacesMessage fm;
        FacesMessage.Severity severity = null;
        try {
           // comision.setActive(Boolean.TRUE);
            fechasExamenRNLocal.create(fechasExamen);
            sMensaje = "El dato fue guardado";
            severity = FacesMessage.SEVERITY_INFO;
            this.getCbAction().setDisabled(true);

            //agregar a la lista
          //  this.getListaComisionBean().getLstComision().add(comision);

            //limpiar campos
            this.limpiar();

        } catch (Exception ex) {
            severity = FacesMessage.SEVERITY_ERROR;
            sMensaje = "Error al crear: " + ex.getMessage();

        } finally {
            fm = new FacesMessage(severity, sMensaje, null);
            FacesContext fc = FacesContext.getCurrentInstance();
            fc.addMessage(null, fm);
        }
    }// fin crear
             
    public void edit() {
        System.out.println("Entro al edit");
        String sMensaje = "";
        FacesMessage fm;
        FacesMessage.Severity severity = null;
        try {
            //get la fila seleccionada 
          
            fechasExamenRNLocal.edit(this.getFechasExamen());
            
            sMensaje = "Información actualizada con éxito";
            severity = FacesMessage.SEVERITY_INFO;

            //elimino y agrego el organismo modificado a la lista
            int iPos = this.getListaFechasExamenBean().getLstFechasExamen().indexOf(this.getFechasExamen());
            this.getListaFechasExamenBean().getLstFechasExamen().remove(iPos);
            this.getListaFechasExamenBean().getLstFechasExamen().add(iPos, this.getFechasExamen());
            

            this.getCbAction().setValue("Modificar");
            this.getCbAction().setDisabled(true);

            //this.setbCamposRequeridos(false);
            RequestContext context = RequestContext.getCurrentInstance();
            context.execute("dlgExamenes.hide()");

        } catch (Exception ex) {
            severity = FacesMessage.SEVERITY_ERROR;
            sMensaje = "Error al actualizar:" + ex.getMessage();

        } finally {
            fm = new FacesMessage(severity, sMensaje, "");
            FacesContext fc = FacesContext.getCurrentInstance();
            fc.addMessage(null, fm);
        }
    }         
             
              private void limpiar() {
        this.fechasExamen = new FechasExamen();
    }
}
