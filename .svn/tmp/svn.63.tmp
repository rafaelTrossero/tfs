/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package bean;

import RN.PresentacionRNLocal;
import RN.ProyectoAlumnoRNLocal;
import RN.ProyectoAsesorRNLocal;
import RN.ProyectoDirectorRNLocal;
import RN.ProyectoRNbeanLocal;
import RN.ProyectoCodirectorRNLocal;
import RN.ProyectoTagsRNLocal;
//import com.itextpdf.text.Document;
//import com.itextpdf.text.Paragraph;
//import com.itextpdf.text.pdf.PdfWriter;
import entidad.Alumno;
import entidad.Asesor;
import entidad.Codirector;
import entidad.Director;
import entidad.Estado;
import entidad.Presentacion;
import entidad.Profesional;
import entidad.ProyectoAlumno;
import entidad.ProyectoAsesor;
import entidad.ProyectoCodirector;
import entidad.ProyectoDirector;
import entidad.Proyecto;
import entidad.ProyectoTags;
//import java.time.Instant;
//import java.time.Instant;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import javax.ejb.EJB;
import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.ManagedProperty;
import javax.faces.bean.RequestScoped;
import javax.faces.context.FacesContext;
import javax.faces.event.ActionEvent;
import org.primefaces.component.commandbutton.CommandButton;
import org.primefaces.context.RequestContext;
import reportes.bean.ReportsBean;


/**
 *
 * @author WalterVergara
 */
@ManagedBean
@RequestScoped
public class ProyectoBean {

    @ManagedProperty("#{listaProyectoBean}")
    private ListaProyectoBean listaProyectoBean;
    @ManagedProperty("#{envioMailsBean}")
    private EnvioMailsBean envioMailsBean;
    private Proyecto proyecto;
    private Proyecto pro;
    private Alumno alumno;
    private Director director;
    private Director dir;
    private Codirector codirector;
    private Asesor asesor;
    private Profesional profesional;
    private Profesional profesionales;
    private Presentacion presentacion;
    private Estado estado;
    private ProyectoAlumno proy_alu;
    private ProyectoAsesor proy_ases;
    private ProyectoCodirector proy_codir;
    private List<Alumno> selectedAlu;
    private List<Profesional> selectedAses;
    private List<Profesional> selectedCodir;
    private ProyectoDirector proy_direc;
    private ProyectoTags proyTags;
    private String palabrasClaves;
    private String palabrasClaves2;
    private String palabrasClaves3;
    private ArrayList<String> tags;

    private CommandButton cbAction;
    private boolean certificado;
    private boolean notadeDirector;

    private boolean notadeAceptacion;
    @EJB
    private ProyectoRNbeanLocal proyectoRNbeanLocal;
    @EJB
    private ProyectoAlumnoRNLocal proy_alumnoRNbeanLocal;
    @EJB
    private ProyectoDirectorRNLocal proy_directorRNbeanLocal;
    @EJB
    private ProyectoAsesorRNLocal proy_asesorRNbeanLocal;
    @EJB
    private ProyectoCodirectorRNLocal proy_codirecRNbeanLocal;
    @EJB
    private PresentacionRNLocal presentacionRNbeanLocal;

     @EJB
    private ProyectoTagsRNLocal proyectoTagRNLocal;
     
    // private String[] requisitos={"0"}; 
    private String notaDirector;
    private String notaAceptacion;
    private String certificadoRegular;// 0= Nota del director
    // 1= Nota de aceptacion
    // 2= Certificado de alumno regular    
    
    private ReportsBean reportsBean;
    private FileUploadBean fileUploadController;
    
    
    

    public ProyectoBean() throws InstantiationException, IllegalAccessException {
        this.proyecto = new Proyecto();
        this.estado = new Estado();
        this.proy_alu = new ProyectoAlumno();
        this.proy_direc = new ProyectoDirector();
        this.proy_ases = new ProyectoAsesor();
        this.proy_codir = new ProyectoCodirector();
       // proyecto.setFecha_ingreso(Date.class.newInstance());
        this.proyTags = new ProyectoTags();
        this.tags = new ArrayList();

    }

    public ListaProyectoBean getListaProyectoBean() {
        return listaProyectoBean;
    }

    public void setListaProyectoBean(ListaProyectoBean listaProyectoBean) {
        this.listaProyectoBean = listaProyectoBean;
    }

    public Proyecto getProyecto() {
        return proyecto;
    }

    public List<Alumno> getSelectedAlu() {
        return selectedAlu;
    }

    public List<Profesional> getSelectedCodir() {
        return selectedCodir;
    }

    public void setSelectedCodir(List<Profesional> selectedCodir) {
        this.selectedCodir = selectedCodir;
    }

    public void setSelectedAlu(List<Alumno> selectedAlu) {
        this.selectedAlu = selectedAlu;
    }

    public ProyectoRNbeanLocal getProyectoRNbeanLocal() {
        return proyectoRNbeanLocal;
    }

    public List<Profesional> getSelectedAses() {
        return selectedAses;
    }

    public void setSelectedAses(List<Profesional> selectedAses) {
        this.selectedAses = selectedAses;
    }

    public void setProyectoRNbeanLocal(ProyectoRNbeanLocal proyectoRNbeanLocal) {
        this.proyectoRNbeanLocal = proyectoRNbeanLocal;
    }

    public void setProyecto(Proyecto proyecto) {
        this.proyecto = proyecto;
    }

    public ProyectoDirector getProy_direc() {
        return proy_direc;
    }

    public void setProy_direc(ProyectoDirector proy_direc) {
        this.proy_direc = proy_direc;
    }

    public CommandButton getCbAction() {
        return cbAction;
    }

    public void setCbAction(CommandButton cbAction) {
        this.cbAction = cbAction;
    }

    public String getNotaDirector() {
        return notaDirector;
    }

    public void setNotaDirector(String notaDirector) {
        this.notaDirector = notaDirector;
    }

    public String getNotaAceptacion() {
        return notaAceptacion;
    }

    public void setNotaAceptacion(String notaAceptacion) {
        this.notaAceptacion = notaAceptacion;
    }

    public String getCertificadoRegular() {
        return certificadoRegular;
    }

    public void setCertificadoRegular(String certificadoRegular) {
        this.certificadoRegular = certificadoRegular;
    }

    public boolean isCertificado() {
        return certificado;
    }

    public void setCertificado(boolean certificado) {
        this.certificado = certificado;
    }

    public boolean isNotadeDirector() {
        return notadeDirector;
    }

    public void setNotadeDirector(boolean notadeDirector) {
        this.notadeDirector = notadeDirector;
    }

    public boolean isNotadeAceptacion() {
        return notadeAceptacion;
    }

    public void setNotadeAceptacion(boolean notadeAceptacion) {
        this.notadeAceptacion = notadeAceptacion;
    }

    public ProyectoTags getProyTags() {
        return proyTags;
    }

    public void setProyTags(ProyectoTags proyTags) {
        this.proyTags = proyTags;
    }

    public String getPalabrasClaves() {
        return palabrasClaves;
    }

    public void setPalabrasClaves(String palabrasClaves) {
        this.palabrasClaves = palabrasClaves;
    }

    public ArrayList<String> getTags() {
        return tags;
    }

    public void setTags(ArrayList<String> tags) {
        this.tags = tags;
    }

    public String getPalabrasClaves2() {
        return palabrasClaves2;
    }

    public void setPalabrasClaves2(String palabrasClaves2) {
        this.palabrasClaves2 = palabrasClaves2;
    }

    public String getPalabrasClaves3() {
        return palabrasClaves3;
    }

    public void setPalabrasClaves3(String palabrasClaves3) {
        this.palabrasClaves3 = palabrasClaves3;
    }

    public EnvioMailsBean getEnvioMailsBean() {
        return envioMailsBean;
    }

    public void setEnvioMailsBean(EnvioMailsBean envioMailsBean) {
        this.envioMailsBean = envioMailsBean;
    }

    public void actionBtn() {

        switch (this.getListaProyectoBean().getiActionBtnSelect()) {
            case 0:
                create();
                //lim√≠ar campos
                //this.limpiar();
                break;
            case 1:
                this.edit();
                break;
            case 2:
                //deshabilita el campo
                this.activate(Boolean.FALSE);
                break;
            case 3:
                //habilita el campo
                this.activate(Boolean.TRUE);
                break;

        }//fin switch
    }//fin actionBtn

    public void CargarTags() {

        int i = 0;
        int j;

        while (!palabrasClaves2.isEmpty()) {

            System.out.println(":::::::::::::--lo que ingrese es  " + palabrasClaves2 + "--------");
            System.out.println(":::::::::::::--lo que ingrese con TRIM() queda  " + palabrasClaves2.trim() + "--------");
            this.palabrasClaves2 = this.palabrasClaves2.trim();
            System.out.println(":::::::::::::--lo que tiene palabrasClaves2 es  " + palabrasClaves2 + "--------");
            this.palabrasClaves2 = this.palabrasClaves2.concat(" ");
            System.out.println(":::::::::::::--Concatenado con espacio en blanco  " + palabrasClaves2 + "--------");
            j = this.palabrasClaves2.indexOf(" ");
            System.out.println("JJJJJJJJJJJJJJJJJJJJJJ ===" + j);
            // hacer un array y poner los string que se vayan sacando
            this.palabrasClaves3 = this.palabrasClaves2.substring(i, j);
            System.out.println(":::::::::::::--la primera palabra es  " + palabrasClaves3);
            System.out.println(":::::::::::::--lo que queda es  " + this.palabrasClaves2.substring(j));
            this.palabrasClaves2 = this.palabrasClaves2.substring(j + 1);
            this.tags.add(palabrasClaves3);

            System.out.println(":::::::::::::--lo que tiene tags es   " + tags);
        }
        System.out.println(":::::::::::::--NUNCA ENTRO AL FOR !!!!  " + palabrasClaves2);
    }

    public void mostrar1(String[] requisitos) {

        if (requisitos[0].equals("1") && requisitos[1].equals("1") && requisitos[2].equals("1")) {
            System.out.println("pasaasasasasasasassa");
        }
    }

    public void setBtnSelect(ActionEvent e) {
        CommandButton btnSelect = (CommandButton) e.getSource();
        System.out.println("boton select: " + btnSelect.getId());

        //0 crea
        //1: edit
        //2 delete
        //activo el boton
        this.getCbAction().setDisabled(false);

        if (btnSelect.getId().equals("cbNuevo")) {
            this.getCbAction().setValue("Guardar");
            this.getListaProyectoBean().setiActionBtnSelect(0);

            //campos requeridos
            //this.setbCamposRequeridos(true);
        } else if (btnSelect.getId().equals("cbEditar")) {
            this.getCbAction().setValue("Modificar");
            this.getListaProyectoBean().setiActionBtnSelect(1);

            System.out.println("valor del boton: " + listaProyectoBean.getiActionBtnSelect());

            //campos requeridos
            // this.setbCamposRequeridos(true);
        } else if (btnSelect.getId().equals("cbDeshabilitado")) {
            this.getListaProyectoBean().setiActionBtnSelect(2);

            //this.setbCamposEditables(true);
            this.getCbAction().setValue("Desactivar");

        } else if (btnSelect.getId().equals("cbHabilitado")) {
            this.getListaProyectoBean().setiActionBtnSelect(3);

            //this.setbCamposEditables(true);
            this.getCbAction().setValue("Reactivar");

        }

        //fin else
    }//fin setBtnSelect

    public void create() {
        String sMensaje = "";
        String sDetalle = "";
        FacesMessage fm;
        FacesMessage.Severity severity = null;
        try {
           
            this.CargarTags();
            System.out.println("si pasa x aca chango");
            System.out.println("si pasa x aca chango");
            System.out.println("si pasa x aca chango");
            System.out.println("si pasa x aca chango" +tags);
            proyecto.setActive(Boolean.TRUE);

            //selectedAlu = new ArrayList<Alumno>();
            pro = new Proyecto();
            alumno = new Alumno();
            profesional = new Profesional();
            profesionales = new Profesional();
            presentacion = new Presentacion();

            if (selectedAlu.isEmpty()) {
                throw new Exception("Se debe seleccionar al menos un Alumno");
            }
            if (selectedAses.isEmpty()) {
                throw new Exception("Se debe seleccionar al menos un asesor");
            }
            if (selectedCodir.isEmpty()) {
                throw new Exception("Se debe seleccionar al menos un codirector");
            }
            if(tags.isEmpty()){
                throw new Exception("Se debe ingresar al menos una palabra clave");
            }

            proy_codirecRNbeanLocal.validar(proy_direc.getDocente(), selectedAses, selectedCodir);
            System.out.println("HHHHHHHHHHHHHHHHHHHHHHHHHHHH::::::::::::------>" + selectedAlu);
            if (selectedAlu.isEmpty()) {
                throw new Exception("Ta maaaaaaaaaaaaaaaaaaaaaaaaaaaaal!!!!!!!!!!!!!!!!!!!");
            }

            // si se cumplen con todos los requisitos el proyecto se da de alta con estado(en proceso de aceptacion de proyecto)
            if (this.notadeDirector == true && this.certificado == true && this.notadeAceptacion == true) {
                System.out.println("pasaasasasasasasassa por este" + notadeDirector + notadeAceptacion + certificado);
                //consulta me devuelve el registro del estado igual a 1
                estado = proyectoRNbeanLocal.findByEstado(1);
                System.out.println("El estado esw:" + estado.getEstado());
                proyecto.setEstado(estado);
                //Realiza el alta del proyecto
                proyectoRNbeanLocal.create(proyecto);
                presentacion.setProyecto(proyecto);
                presentacion.setCertificados(this.certificado);
                presentacion.setNota_aprobacion(this.notadeAceptacion);
                presentacion.setNota_director(this.notadeDirector);
                presentacion.setFecha(this.proyecto.getFecha_ingreso());
                presentacionRNbeanLocal.create(presentacion);

               /*
                Para la carga de las palabras Claves
                */
                Iterator<String> tag = tags.iterator();
                System.out.println("el archivo es " + tags);
                //System.out.println("el codigo del proyecto es " + proy_ases.getProyecto().getTitulo());

                while (tag.hasNext()) {
                    palabrasClaves = tag.next();
                    
                    proyTags.setTag(palabrasClaves);
                    proyTags.setProyecto(proyecto);
                    proy_ases.setProfesional(profesional);
                    //realiza el alta en la tabla relacional proy_asesor dependiendo de cuantos asesores se han seleccionado
                    proyectoTagRNLocal.create(proyTags);
                    

                }
                 sDetalle="El estado del proyecto es ahora : "+estado.getEstado();
                /*
                TO DO
                Carga de archivo del proyecto (soporte digital)
                */
            }

            // si NO se cumplen con todos los requisitos el proyecto se da de alta con estado(se requiere una nueva presentacion de proyecto)
            if (this.notadeDirector == false || this.certificado == false || this.notadeAceptacion == false) {
                System.out.println("pasa por el otro lado por el no" + notadeDirector + notadeAceptacion + certificado);
                //consulta me devuelve el registro del estado igual a 3
                estado = proyectoRNbeanLocal.findByEstado(3);
                System.out.println("El estado esw:" + estado.getEstado());
                proyecto.setEstado(estado);
                //Realiza el alta del proyecto
                proyectoRNbeanLocal.create(proyecto);
                presentacion.setProyecto(proyecto);
                presentacion.setCertificados(this.certificado);
                presentacion.setNota_aprobacion(this.notadeAceptacion);
                presentacion.setNota_director(this.notadeDirector);
                presentacion.setFecha(this.proyecto.getFecha_ingreso());
                presentacionRNbeanLocal.create(presentacion);
                
                    /*
                Para la carga de las palabras Claves
                */
                Iterator<String> tag = tags.iterator();
                System.out.println("el archivo es " + tags);
                //System.out.println("el codigo del proyecto es " + proy_ases.getProyecto().getTitulo());

                while (tag.hasNext()) {
                    palabrasClaves = tag.next();
                    
                    proyTags.setTag(palabrasClaves);
                    proyTags.setProyecto(proyecto);
                    proy_ases.setProfesional(profesional);
                    //realiza el alta en la tabla relacional proy_asesor dependiendo de cuantos asesores se han seleccionado
                    proyectoTagRNLocal.create(proyTags);
                    

                }
                 sDetalle="El estado del proyecto es ahora : "+estado.getEstado();
                  /*
                TO DO
                Carga de archivo del proyecto (soporte digital)
                */
            }

            //Consulta me devuelve el codigo del proyecto
            pro = proyectoRNbeanLocal.findProyectoName(proyecto);

            proy_alu.setProyecto(pro);
            System.out.println("el archivo es " + selectedAses);

            //recorre el list de los alumnos afectados en el proyecto
            Iterator<Alumno> it = selectedAlu.iterator();
            System.out.println("el archivo es " + selectedAlu);

            while (it.hasNext()) {
                alumno = it.next();
                System.out.println("hola" + alumno.getNombre());
                proy_alu.setAlumno(alumno);

                //realiza el alta en la tabla relacional proy_alumno dependiendo de cuantos alumnos se han seleccionado
                proy_alumnoRNbeanLocal.create(proy_alu);
            }
            //para el alta del registro proy_director************
            proy_direc.setActive(Boolean.TRUE);
            proy_direc.setProyecto(pro);
            System.out.println("codigos respectivos" + proy_direc.getProyecto().getId() + proy_direc.getDocente().getApellido());
            proy_directorRNbeanLocal.create(proy_direc);

            //para el alta de registro proy_asesor **************
            proy_ases.setActive(Boolean.TRUE);
            proy_ases.setProyecto(pro);
            //recorre el list de los ascesores afectados en el proyecto
            Iterator<Profesional> as = selectedAses.iterator();
            System.out.println("el archivo es " + selectedAses);
            //System.out.println("el codigo del proyecto es " + proy_ases.getProyecto().getTitulo());

            while (as.hasNext()) {
                profesional = as.next();
                System.out.println("hola" + profesional.getApellido());
                proy_ases.setProfesional(profesional);
                //realiza el alta en la tabla relacional proy_asesor dependiendo de cuantos asesores se han seleccionado
                proy_asesorRNbeanLocal.create(proy_ases);

            }
            //para el alta de registro proy_codirector **************
            proy_codir.setActive(Boolean.TRUE);
            proy_codir.setProyecto(pro);
            //recorre el list de los codirectores afectados en el proyecto
            Iterator<Profesional> cod = selectedCodir.iterator();
            System.out.println("el archivo es " + selectedCodir);

            while (cod.hasNext()) {
                profesionales = cod.next();
                System.out.println("hola" + profesionales.getApellido());
                proy_codir.setProfesional(profesionales);
                //realiza el alta en la tabla relacional proy_asesor dependiendo de cuantos asesores se han seleccionado
                proy_codirecRNbeanLocal.create(proy_codir);

            }

            if (notadeDirector == true && certificado == true) {
                System.out.println("el contenido de los booleanos es.......:: nota de director " + notadeDirector + certificado);

            }
            if (notadeDirector == false && certificado == false) {
                System.out.println("los resultados son otros " + notadeDirector + certificado);
            }

            sMensaje = "El Proyecto fue guardado exitosamente";
            severity = FacesMessage.SEVERITY_INFO;
            this.getCbAction().setDisabled(true);
            //agregar a la lista
            this.getListaProyectoBean().getLstProyecto().add(proyecto);

            RequestContext context = RequestContext.getCurrentInstance();
            context.execute("dlgProyecto.hide()");

            this.envioMailsBean.ReporteCambioDeEstado(pro);
            
            
                 
              
            
            
            //limpiar campos
            this.limpiar();

        } catch (Exception ex) {
            severity = FacesMessage.SEVERITY_ERROR;
            sMensaje = "Error: " + ex.getMessage();

        } finally {
            fm = new FacesMessage(severity, sMensaje, sDetalle);
            FacesContext fc = FacesContext.getCurrentInstance();
            fc.addMessage(null, fm);
        }
    }// fin crear

    public void edit() {
        System.out.println("Entro al edit");
        String sMensaje = "";
        FacesMessage fm;
        FacesMessage.Severity severity = null;
        try {
            //get la fila seleccionada   
            proyecto.setActive(Boolean.TRUE);

            proyectoRNbeanLocal.edit(this.getProyecto());

            sMensaje = "Datos actualizados correctamente";
            severity = FacesMessage.SEVERITY_INFO;

            //elimino y agrego el organismo modificado a la lista
            int iPos = this.getListaProyectoBean().getLstProyecto().indexOf(this.getProyecto());
            this.getListaProyectoBean().getLstProyecto().remove(iPos);
            this.getListaProyectoBean().getLstProyecto().add(iPos, this.getProyecto());

            //this.getCbAction().setValue("Update");
            this.getCbAction().setDisabled(true);

            //  this.setbCamposRequeridos(false);
        } catch (Exception ex) {
            severity = FacesMessage.SEVERITY_ERROR;
            sMensaje = "Actualizacion error: " + ex.getMessage();

        } finally {
            fm = new FacesMessage(severity, sMensaje, null);
            FacesContext fc = FacesContext.getCurrentInstance();
            fc.addMessage(null, fm);
        }
    }//fin edit

    public void activate(Boolean bEstado) {
        String sMensaje = "";
        FacesMessage fm;
        FacesMessage.Severity severity = null;

        try {

            proyectoRNbeanLocal.activate(this.getProyecto(), bEstado);

            //elimino el organismo de la lista
            int iPos = this.getListaProyectoBean().getLstProyecto().indexOf(this.getProyecto());
            this.setProyecto(this.getListaProyectoBean().getLstProyecto().get(iPos));
            this.getProyecto().setActive(bEstado);
            this.getListaProyectoBean().getLstProyecto().remove(iPos);
            this.getListaProyectoBean().getLstProyecto().add(iPos, this.getProyecto());

            if (!bEstado) {
                sMensaje = "Proyecto deshabilitado correctamente";
            } else {
                sMensaje = "Proyecto habilitado correctamente";
            }
            severity = FacesMessage.SEVERITY_INFO;

            this.getCbAction().setDisabled(true);

            //lim√≠ar campos
            this.clear();
            // this.setbCamposRequeridos(false);

        } catch (Exception ex) {
            severity = FacesMessage.SEVERITY_ERROR;
            sMensaje = "Ocurrio un error durante la operacion: " + ex.getMessage();

        } finally {
            fm = new FacesMessage(severity, sMensaje, null);
            FacesContext fc = FacesContext.getCurrentInstance();
            fc.addMessage(null, fm);
        }
    }//fin recuperar

   
    private void limpiar() {
        this.proyecto = new Proyecto();
    }

    private void clear() {
        this.setProyecto(new Proyecto());

    }//fin limpiar
}
